#!/usr/bin/env python

import os.path

from coast_guard import database
from coast_guard import utils


def get_loaded_whereclause(psrname):
    db = database.Database()
    whereclause = (db.obs.c.sourcename == psrname) & \
                  (db.obs.c.obstype == 'pulsar') & \
                  (db.files.c.status == 'done')
    return whereclause


def get_all_whereclause(psrname):
    db = database.Database()
    whereclause = (db.obs.c.sourcename == psrname) & \
                  (db.obs.c.obstype == 'pulsar')
    return whereclause


def get_calibrated_whereclause(psrname):
    db = database.Database()
    whereclause = (db.obs.c.sourcename == psrname) & \
                  (db.obs.c.obstype == 'pulsar') & \
                  (db.files.c.stage == 'calibrated') & \
                  (db.files.c.qcpassed == True)
    return whereclause


def get_cleaned_whereclause(psrname):
    db = database.Database()
    whereclause = (db.obs.c.sourcename == psrname) & \
                  (db.obs.c.obstype == 'pulsar') & \
                  (db.files.c.stage == 'cleaned') & \
                  (db.files.c.qcpassed == True)
    return whereclause


FILETYPE_TO_WHERE = {'loaded': get_loaded_whereclause,
                     'all': get_all_whereclause,
                     'calibrated': get_calibrated_whereclause,
                     'cleaned': get_cleaned_whereclause}


def get_files(psrname, filetype, rcvr=None):
    """Get a list of data base rows containing
        file and obs information for the given pulsar,
        filetype and receiver.

        Inputs:
            psrname: The name of the pulsar to match.
            filetype: The type of files to match.
            rcvr: The name of the receiver to match.
                (Default: Match all)

        Outputs:
            rows: A list of rows containing file and obs
                information for each matching file.
    """
    db = database.Database()
    psrname = utils.get_prefname(psrname)
    getwhere = FILETYPE_TO_WHERE[filetype]
    whereclause = getwhere(psrname)
    if rcvr is not None:
        whereclause &= (db.obs.c.rcvr == rcvr)

    with db.transaction() as conn:
        select = db.select([db.files, 
                            db.obs.c.dir_id,
                            db.obs.c.sourcename,
                            db.obs.c.obstype,
                            db.obs.c.start_mjd,
                            db.obs.c.rcvr],
                    from_obj=[db.files.\
                        outerjoin(db.obs,
                            onclause=(db.files.c.obs_id ==
                                        db.obs.c.obs_id))]).\
                    where(whereclause).\
                    order_by(db.files.c.added.asc())
        result = conn.execute(select)
        rows = result.fetchall()
        result.close()
   
    # Only keep most recently added file for each
    # observation. Rows are sorted in the query above.
    obs_ids = []
    for ii in reversed(range(len(rows))):
        if rows[ii]['obs_id'] in obs_ids:
            rows.pop(ii)
        else:
            obs_ids.append(rows[ii]['obs_id'])
    return rows


def main():
    rows = get_files(args.psrname, args.type)
    info = {}
    for row in rows:
        print os.path.join(row['filepath'], row['filename'])
        utils.print_info("    File ID: %(file_id)d; "
                         "Obs ID: %(obs_id)d; "
                         "Status: %(status)s; "
                         "Stage: %(stage)s; "
                         "QC passed: %(qcpassed)s" % row, 2)
        info['Total'] = info.get('Total', 0)+1
        info['QC Passed'] = info.get('QC Passed', 0)+int(row['qcpassed'])
        info['Status %s' % row['status']] = \
            info.get('Status %s' % row['status'], 0)+1
        info['Stage %s' % row['stage']] = \
            info.get('Stage %s' % row['stage'], 0)+1
    utils.print_info("Summary:\n    %s" %
                     "\n    ".join(["%s: %d" % xx for xx in info.iteritems()]), 1)


if __name__ == '__main__':
    parser = utils.DefaultArguments(description="List files generated by "
                                                "the automated pipeline.")
    parser.add_argument('-p', '--psr', dest='psrname', type=str,
                        required=True,
                        help='Name of the pulsar to fetch files for.')
    parser.add_argument('--type', dest='type', type=str,
                        help='Type of files to list. Options are:'
                             '%s' % sorted(set(FILETYPE_TO_WHERE.keys())))
    args = parser.parse_args()
    main()
